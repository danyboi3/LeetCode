/*
Consider all the leaves of a binary tree.  From left to right order, the values of those leaves form a leaf value sequence.

For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).

Two binary trees are considered leaf-similar if their leaf value sequence is the same.

Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.

 

Note:

Both of the given trees will have between 1 and 100 nodes.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        List<Integer> leaves_1 = new ArrayList<Integer>();
        List<Integer> leaves_2 = new ArrayList<Integer>();
        
        helper(root1, leaves_1);
        helper(root2, leaves_2);
        
        if(leaves_1.size() != leaves_2.size()) 
        	return false;
        
    	for(int i = 0; i < leaves_1.size(); i++) {
        	if(leaves_1.get(i) != leaves_2.get(i))
        		return false;
    	}
        return true;
       
    }
    
    private void helper(TreeNode node, List<Integer> ls) {
    	if(node == null)
    		return;
    	helper(node.left, ls);
    	helper(node.right, ls);
    	
    	if(node.left == null && node.right == null) {
    		ls.add(node.val);
    	}
    }
}
